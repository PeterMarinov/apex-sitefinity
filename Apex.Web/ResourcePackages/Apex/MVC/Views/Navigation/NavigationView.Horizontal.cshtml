@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

<nav class="navbar navbar-expand-lg bg-white navbar-light sticky-top px-4 px-lg-5 py-lg-0 @Model.CssClass">
    <a href="/" class="navbar-brand d-flex align-items-center">
        <h1 class="m-0">
            <i class="fa fa-building text-primary me-3"></i>APEX
        </h1>
    </a>
    <button type="button"
            class="navbar-toggler"
            data-bs-toggle="collapse"
            data-bs-target='#@Html.UniqueId("navbar")'
            aria-controls='@Html.UniqueId("navbar")'
            aria-expanded="false"
            aria-label="@Html.Resource("ToggleNavigation")">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id='@Html.UniqueId("navbar")'>
        <div class="navbar-nav ms-auto py-3 py-lg-0">
            @{
                int i = 0;
                foreach (var node in Model.Nodes)
                {
                    @RenderRootLevelNode(node, i);
                    i++;
                }
            }
        </div>
    </div>
</nav>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node, int i)
{
    if (node.ChildNodes.Count > 0)
    {
        <div class="nav-item dropdown @GetClass(node)">
            <a href="#"
               class="nav-link dropdown-toggle"
               id='@Html.UniqueId("navbarDropdownMenuLink" + i)'
               role="button"
               data-bs-toggle="dropdown"
               data-bs-auto-close="outside"
               aria-haspopup="true"
               aria-expanded="false">@node.Title</a>
            <div class="dropdown-menu bg-light m-0" aria-labelledby='@Html.UniqueId("navbarDropdownMenuLink" + i)'>
                @foreach (var childNode in node.ChildNodes)
                {
                    <a href="@childNode.Url" class="dropdown-item @GetClass(childNode)" target="@childNode.LinkTarget">@node.Title</a>
                }
            </div>
        </div>
    }
    else
    {
        <a href="@node.Url" class="nav-item nav-link @GetClass(node)" target="@node.LinkTarget">@node.Title</a>
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{
    if (node.IsCurrentlyOpened)
    {
        @Html.HtmlSanitize("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.HtmlSanitize("active");
    }
}